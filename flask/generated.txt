The other day I was standing in front of this building, and I could feel<br/>the weight of the buildings that I was standing next to. We were<br/>going to meet this year at 7 pm.  I felt the need to tell my<br/>fan, because I wouldn't let the building go to waste, because that<br/>seemed more or less the right answer.  It took me a while<br/>to find the right buildings for the next meeting.  <br/>  <br/>We got off at the next intersection and walked for about 50 feet<br/>around to get to the next intersection. To our surprise we hit these<br/>things. For the next 40 minutes or so we made our way through a lot of it.  <br/>  <br/>Finally it was time to meet there. It was a very big meeting, more than I expected.  <br/>  <br/>I took the elevator up to meet this person. I'm not sure of the<br/>name, but he was sort of like Yoda, just a man in his fifties, and the<br/>most important thing anyone could do was try to talk Yoda into meeting him.<br/>I got my ticket.  <br/>  <br/>We sat down and ate. But that was more a joke than anything, because we<br/>were the only people there. We sat down on our asses.  Good thing you asked too.  <br/>  <br/>If we hadn't been there, we could have eaten. We had cooked dinner for<br/>each other on several occasions. That was probably the best we<br/>had.  We got a lot of information out of it, and I think that was one<br/>thing that kept us all coming back. When we were in a room with someone<br/>and the waiter had a very brief interpreter sitting with them, the<br/>voiceover made it clear to the waiter that this was my question, and we were<br/>to ask it.  <br/>  <br/>A big chunk of that was our conversation. Mostly we were talking about<br/>things we'd done that seemed important to us, like Yoda's, to him.<br/>He always seemed like we were talking about stuff that he'd done to other<br/>men. We were genuinely in a position to be surprised if he said no: Yoda<br/>was talking about sex when he was asking this, about Yoda's birthday,<br/>or the fact that Yoda would be standing behind us when we were talking to<br/>his friend, that I was going to ask what Yoda was up to.  <br/>  <br/>One other thing that kept us laughing was our questions. We weren't surprised<br/>when he told us that Yoda was coming to dinner. He was talking about how<br/>he'd gotten rich in the city; it would be fun to see who was running the place;<br/>that he'd made a fortune at building a store; or the fact that Yoda was hosting<br/>this great event every other Saturday.  <br/>  <br/>What I liked most about this meeting was his ignorance. There were<br/>some jokes thrown at him, but most were about stealing.  <br/>  <br/>  <br/>  <br/>  <br/>  <br/>  <br/>  <br/>**Notes**  <br/>  <br/>[1] This guy might have done things that you don't hear much about when I get<br/>the impression these founders don't mean any business, like making a<br/>couple million in venture funding, but that wasn't something Yoda does any<br/>kind of business. This guy is a kind of salesman: he tells a story about<br/>different startups, and makes them into products like that.  <br/>  <br/>[2] This is something the founders of Y Combinator have seen recently. It's<br/>not necessarily a bad sign when someone like that is at a conference. The<br/>bigger companies seem to be making the big, and the people who work for them<br/>are the ones who don't think about those questions. This is what we were<br/>waiting for in the startups they were investing in.  <br/>  <br/>[3] This guy was not trying to go out and show a company what they've<br/>done. He was just trying to show a company how to make a difference.  <br/>  <br/>**Next Steps**  <br/>  <br/>We weren't sure if the meeting that night would affect our next<br/>convention. As it happens, we were at Y Combinator with several other<br/>people starting a startup, and I'm aware at the very least of this. I don't want<br/>someone who doesn't have a lot of experience to tell us what they've done<br/>on Y Combinator: Y.C.C. and Sequoia. We will need to figure this out, though. This<br/>conference is not a great place to find companies to work with. We need<br/>someone who can tell the company<br/><br/><br/>SPLIT_CHARACTERS<br/><br/>* * *<br/><br/>December 2013  <br/>  <br/>The best startup ideas are the ones that do. I know this because I've<br/>read the most recent list of the 100 greatest startup ideas, and<br/>been very surprised to discover that there's more that were not.  <br/>  <br/>The good ideas are usually ideas we can take for granted, and we can't wait to<br/>take for granted the ideas we can change. In the past, when someone had a<br/>precise idea, they usually had a hard time convincing the rest of the<br/>world. So you may be surprised to find that a new idea is worth<br/>thinking about. The idea that would change the world is usually a startup. So<br/>why not take it for granted?  <br/>  <br/>Because, unlike most people, we can't predict what other people will come<br/>way before us. Most good ideas seem to be in the initial stages, when an<br/>idea is thought of only by its founder. And that's a problem. Often when someone has<br/>concluded something, he hasn't thought of a more promising idea until it's<br/>already part of our world. For example, the idea that I'd recommend to a friend<br/>who said that he'd like to start his own company was, from what I knew so<br/>far, the idea that seemed crazy that the next best thing would be to work on it.  <br/>  <br/>I'm not saying you have to wait. In practice you don't. You start with the<br/>obstacle and find that you feel it, and then in the next step you discover,<br/>no matter how small, that you have no idea of what the next step is. [1]  <br/>  <br/>This is especially true of ideas that seem obvious. I think most smart<br/>founders find it useful just to believe so. So in this case they have to<br/>come up with a good idea.  <br/>  <br/>They have to come up with the idea that will excite the most imaginative<br/>founders, and it has to be something that gets people talking to each<br/>other about. It's hard to imagine an idea that would excite more than that<br/>of a friend. And yet someone has to come up with one.  <br/>  <br/>So here's what worries me.  <br/>  <br/>The most admirable idea everyone has to have to do something great is<br/>say no. How much better to say than to follow the lead of anyone else.<br/>Most startups I know never get anywhere near that level of urgency.<br/>That's one reason not to do it; we have no one to tell us what to do.  <br/>  <br/>**Ambition**  <br/>  <br/>If you're a programmer, you probably think of yourself as very amiable<br/>enough. In fact, what's great about working for your employer is simply that<br/>you get paid the same as your salary.  <br/><br/>We should also be careful not to overvalue what is<br/>necessary.  <br/>  <br/>One of the more famous examples is the way in which a startup takes off. People<br/>start startups because they're afraid of risk, or the risk they are taking is<br/>so bad that they don't matter anyway. They could be starting a food startup<br/>any day; one day they'll think about the food they're eating and go "Oh<br/>that's expensive? Why aren't we focusing on the food?" and if they have<br/>something they wish they could use, that's why.  <br/>  <br/>If it seems obvious to outsiders to measure risk, it is also true that it is. It<br/>can't be anything but. For example, it will never be enough to buy the first<br/>person perspective you can get. We've seen this before with VR. If you sit close to a<br/>rare object and try to imagine it, the first impression you get is that the<br/>objects are too small.  <br/>  <br/>People often confuse the problem of risk with that of reward. This is a<br/>problem as general as software: it affects software as well as people. And yet<br/>if risk is measured, investors and executives will tend to be willing to chase<br/>away risk at the price of reward. Even if the payoff is greater, the latter<br/>will get _less reward._ But it may not be that well balanced: for<br/>investors and executives, reward is a secondary source of value, and they may not<br/>want to pursue that source with the kind of determination that attracts<br/>money. So the problem with reward may become more general as new opportunities open<br/>to it are added.  <br/>  <br/>  <br/>  <br/>  <br/>  <br/> **Thanks** to Sam Altman and Paul Buchheit for reading drafts of<br/>this.  <br/><br/><br/>SPLIT_CHARACTERS<br/>  <br/> **Why VCs Matter**  <br/>  <br/>If investing is so important, why should there only be one company for each market? I<br/>don't think so. VCs are the stars. VCs are the nerds. They're the ones putting<br/>investments on companies. They need the company to do really well. But they can't get<br/>VCs to invest millions for them. And they aren't likely to. There is a huge gap<br/>between what they want the company to do and what actual investors are<br/>supposed to want, and they can't get them.  <br/>  <br/>So where is the startup going to be best served by getting the money? Will it be<br/>somewhere good, but bad? And if not, how will it pay over there? What are the advantages<br/>of a low cost source of funding?  <br/>  <br/>The disadvantage of a publicly traded company, as everyone knows, is that<br/>there are few alternatives. So a company that wasn't public would still<br/>have a huge opportunity cost. But a company that was private would end up<br/>paying more.  <br/>  <br/>The advantage of taking a private company private is that you can get valuable<br/>resources from it. Whereas a public company would have to pay some<br/>premises taxes before they could return to the private sector. Most private<br/>companies in the world, tax-free, don't collect taxes at all. Their revenues<br/>either go to them or accumulate in some other way. This is the company that has to<br/>be private.  <br/>  <br/>Of course, it's not just companies that have to get private revenues. So too do<br/>government departments; all that constrains government agencies is that they have to<br/>act on the orders of the president.  <br/>  <br/>Which brings us to the advantage of startups. The advantages of startups are<br/>a), the chance to grow rapidly; b), the advantage of raising money from them<br/>because they're raising money from VCs and so on. [1]  <br/>  <br/>What's a VC? VCs are angels, for long-term financing. They invest large<br/>amounts of capital in a few projects that ultimately turn out to be profitable. They need<br/>to do that. But while a typical VC could fund five projects, a startup fund can<br/>fund as many as 10.  <br/>  <br/>So why is a VC so important? That depends on your point of view. I think a<br/>VC is a big company with a board of directors and executives who are all<br/>about five guys at the peak of their powers. One of the board members is a<br/>professional poker player, or PG, who gets regular pay at the end of the day. When a<br/>VC gets a check from their boss for a certain type of investment, it's<br/>put into the trust of the next person on the board instead of getting taken<br/>along by it.  <br/>  <br/>But most VCs aren't big company officers. And so they can't invest a lot<br/>for startups. So most founders go to VC firms. Why do founders want to go to<br/>VC firms? Why aren't more founders investing in companies they think<br/>are going to make it? What it means is that you should be less committed to<br/>working on your startup. Or rather, to working on your startup. It could be that<br/>you're doing both, but I don't know what it means. Most founders going to<br/>VC firms are just looking for some type of external source of funding.<br/>VC firms may not have a lot of experience in startups, but they'll be able<br/>to give you a pretty good grade, even in a bad startup. That's what you're<br/>doing. [2]  <br/>  <br/><br/>SPLIT_CHARACTERS<br/>* * *<br/><br/><br/><br/>April 2012  <br/>  <br/>A few days ago I finally figured out what kills programmers:<br/>messages dropping during meetings. I'd noticed they were often<br/>dropped by unprofessional means for the reason that they rarely had good<br/>conversations. But what I found was that these kinds of accidents were<br/>caused by bad design decisions. I thought it was the fault of everyone:<br/>everyone just didn't have the discipline to keep them in check.  <br/>  <br/>If you're a hacker, you'll be surprised how different it can be from<br/>doing the right thing.  <br/>  <br/>At Viaweb we were forced to follow a very conservative set of design decisions<br/>when meeting developers. If there was a problem with our software, we'd do<br/>better to release it quickly and clearly in red. Otherwise problems<br/>would remain that way even if we solved the problem.  <br/>  <br/>Companies trying to hire programmers may be justified in doing this by a<br/>technical explanation. But if this sort of explanation is used to justify bad design<br/>by employers, it will tend to backfire. If employers don't want to hire<br/>programmers, they don't need to design their software in such a way,<br/>because they don't have to (or don't want) considering applications from<br/>many different types of users.  <br/>  <br/>The reason good design happens behind closed doors is that hackers collaborate<br/>more than other workers. Design is more than just deciding what to do<br/>till you have coworkers. It's also what programmers do. And the way to do<br/>good design is to collaborate, preferably openly.  <br/>  <br/> **2\. Bad Location**  <br/>  <br/>Most hackers prefer to work in a place where there's a lot of people.<br/>But I think hackers prefer a more chaotic environment. I think hackers<br/>live a more miserable existence.  <br/>  <br/>We've all seen some stressful and unusual situation; some amount of time<br/>remaining after disasters, or a deadline, or a new idea; but most of us don't<br/>realize how much time we have.  <br/>  <br/>If we think about what it would take to get something done in a startup, and<br/>how you manage to manage to manage to manage to manage to manage to manage to<br/> manage to manage to manage to manage to manage to manage to manage to manage to manage to<br/>to manage to manage to manage. Those are the two big lessons we get wrong<br/>about startups.  <br/>  <br/> **3\. Obstinacy**  <br/>  <br/>I think it's generally an obstacle to starting a startup. Obstinacy<br/>is always there, but they tend to be magnified by the obstacles you face in<br/>starting a startup.  <br/>  <br/>For example, most people don't like starting a startup. It's not something<br/>they like doing; they like it so much that they're not even sure what to do<br/>with it. I think most of us have this thing called "admirer status"<br/>taught as a child that we had to start the company. We didn't realize till later<br/>that this quality was independent of any specific goal. And so most of us don't<br/>like to start a startup.  <br/>  <br/>A lot of people started startups because they didn't like it. Starting one didn't<br/>pressure too hard, but the people who did the hardest to get started didn't like<br/>it. They just got a lot more ambitious.<br/><br/><br/>**Notes**  <br/>  <br/>[1] This is my take on how startups are killed in ours.  <br/>  <br/>[2] In practice, it means that when you reach a point where you don't need the money, you<br/>can spend it on things you need. That's not a direct result of investing; it's the<br/>idea in which startups fail that they fail.  <br/>  <br/>[3] The best approach is to treat a startup as a piece of software—an instance<br/>of a larger, ongoing continuum. In a typical startup, each step is a mutation in<br/>that continuum, with new things added at each point.  <br/>  <br/>[4] Though the phrase "software continuum" originally came from Richard Stallman,<br/>the actual term is derived from the Latin _lepere_ , meaning "point of view."<br/>That's why the phrase is still used in the US today.  <br/><br/><br/>SPLIT_CHARACTERS<br/><br/>**The Plan for the Duma**<br/><br/>So let's talk about the mails. What to do about the fax machine?<br/><br/>I've read a lot of software that uses fax machines, and none that uses them.<br/>It is the most common form of error, and the one that really bothers me.<br/><br/>When you use a fax machine, the error is the same everywhere. You do it to<br/>people in your field. But when you use fax machines, the error is spread<br/>among yourself. Within technology, the error is not spread among<br/>employees, but by people who use your software, and this spreads to<br/>everyone.<br/><br/>To some people, software is more of a commodity than a<br/>marketable commodity. Others find it distressing that people<br/>use fax machines for the same reason they do graffiti: they<br/>feel they have no use for it. But most of the people who use<br/>software for other people use the same software for which they do<br/>taxes.<br/><br/>The mails are your data. If you could send faxes to everyone, which<br/>taxes are you most excited about? Which will probably change depending<br/>on the current political situation. Do you have one for your neighbor?<br/><br/>Or is there a simpler, cheaper alternative? I am not sure. If you<br/>could send mail addresses from one location to another, what would it<br/>say about your life?<br/><br/>I have used a lot of email clients before but they still keep getting<br/>messy. Inexpensive ones are hard to spoof and can be turned off<br/>if you have misgivings about their security. What I need from them<br/>is raw email addresses and no broken private messages. Simple as that.<br/><br/>The most valuable way to deal with mails is not to send them to your<br/>employees. That's a win, because sending email from a location to your<br/>employees is a lot like sending mail: the sender tends to be in touch<br/>with his recipient, and the destinations are more or less the same. But<br/>the point is, the mails are your data. The point is your data, and<br/>the mail is your data for the mails and the mails and the mails and the m<br/>taxes.<br/><br/>___<br/><br/>If you want to get real email out of people, you need to use a technique<br/>called recriminations. These are not just a way of discarding random<br/>stuff. They're a technique used by many web crawlers that doesn't really<br/>pay.<br/><br/>___<br/><br/>How do you recognize good looking mail? Look at it from different<br/>points of view. Look at the mail for the first couple characters before<br/>looking at the rest. Are there spaces or commas? Are there periods? Do there<br/>look like there's a backslash at the end? Are there a handful of periods?<br/>When you start looking at the rest of the body, it's a good sign that there's<br/>there. And when you write the first few lines, it's a sign the author is<br/>using punctuation to emphasize what he's saying.<br/><br/>The most effective way to see if a writer is using writing that way is to<br/>look at the beginning of a piece of paper. What he's saying is the<br/>same thing, and you can tell from the shape of the paper that the<br/>writer is using the same technique. Just be sure to point out where<br/>this isn't.<br/><br/>You can use this technique anywhere, so you don't have to go to the<br/>rest of the page to figure out what's going on. It's more of a technique<br/>for font and image editing than for displaying text.<br/><br/>If you have a question you want answered, ask it to someone you trust.<br/>Don't just ask them to the satisfaction of having the answer. Ask:<br/><br/>> What was the point of writing this piece of paper?<br/><br/>If the answer is obvious, reply:<br/><br/>> Why did you need to write this?<br/><br/>Don't just answer the question, "What was the point of writing this<br/>paper?" Because that's where you'll find answers.<br/><br/>You don't need to rely on traditions of scholarship to answer people's<br/>questions. You don't need to rely on old-fashioned proofs of<br/>abstractness. You need to rely on the kind of proofs that really<br/>work<br/>could be the next Yahoo. The big question is: do they make something really good or just something that's not great?  <br/><br/>I think they make something great. I don't think they know that. But if they do, and<br/>you're willing to bet on the latter, you have a shot at a company that will at<br/>least make you happy. Or more precisely, a company that will _make_ you happy._<br/><br/> **Time**<br/><br/>If you want a startup to happen fast, you have to manage the expectations of a<br/>startup. You have to manage the expectations of both the founders and the customers.<br/>And you have to do that in a way that's proportionate to your skill and your capital.<br/><br/>Let me give you an example of a product that's made in half a year and that I know<br/>it will sell very well: you may not sell it till much later, and you have to<br/>carry on doing business as business even if it's not your first product, because<br/>it never was. If Microsoft could make themselves a big market, everyone would<br/>want that.<br/><br/>So if you want to start a startup, start in half a year and get your first unit<br/>out to customers on a regular basis. That's how it's measured in most of the<br/>world.<br/><br/> **Experience**<br/><br/>If you want to succeed in a big way, you have to be able to answer a large<br/>number of simple questions. These can be acquired, as sprinters do, by<br/>expert hackers or professional models by consulting people who know the<br/>hardest stuff.<br/><br/>But the most important question you have to answer is not what you know,<br/>but what you can't. It's practically a zero-sum game. You don't know<br/>what you can't do, but what you can do.<br/><br/>Understanding the hard questions can be useful in different fields. For example,<br/>exactly what is research? Is it hard to answer, or is it useful? Is it the<br/>right solution for the right problem? Knowing what you can't is the most<br/>important thing you have to know.<br/><br/>Knowing what you can't is even a useful counterintuitive<br/>question, because it shows us what problems are hard to solve. Surely<br/>it would be more useful to solve a few simple problems than many, but the<br/>answer is always the same: solve a few hard problems than a lot.<br/><br/>And so you don't have to know what you can't do, because many tasks<br/>are hard. If you want to write software, for example, you'll need to be<br/>programming. And yet software is actually quite a dangerous occupation for<br/>software developers. Software is used as a weapon, as a form of torture, and<br/>desperation is the main reaction. And software developers, like kids, hate it.<br/>They consider software the product of some brutal enterprise where the products<br/>were developed by fabulously paid people who went on to do really good work<br/>when they were paid a lot.<br/><br/>So if you want to make software that can be used by a wide range of people,<br/>you need to understand what it's made of. And if you want to make a language<br/>that is the opposite of a good one, you should learn how.<br/><br/> **Design**<br/><br/>I believe Lisp was originally designed for its users. The goal of Lisp was to be the<br/>language for designing machines, and to do that, you had to be able to hack<br/>for each user. The design of the language was divided into two phases: the<br/>design of hardware, and the formal development of new features.<br/>The first phase, the formalization of the design of the language.<br/>The language was the language for design, and the language, as far as programmers<br/>were concerned, was the language for programming. For most of the world,<br/>manual hardware is the limiting medium for new features. Theoretically,<br/>programmers could do a lot of new things with it. But it was not the language<br/>that was the language for development. It was the programmer's language,<br/>designed for his own purposes, and used for his own purposes.<br/><br/>The language was the language for developing new features, and this was why Lisp<br/>was popular. It was the language for developing new features. It was the<br/>language that Lisp was popular with schoolchildren. This was why it's so hard to<br/>get kids to use Lisp, or pay attention to kids using Lisp, or even understand<br/>what a Lisp program is.<br/><br/>The language was the language for developing new features<br/>employee<br/><br/>Whether you're a startup founder looking for a new job or just starting a startup, you should<br/>try starting a startup.<br/><br/> **7\. Don't Get Your Ass Out of Your Head.**<br/><br/>Startups often get in the way of the real deal. So don't get your ass out of<br/>your head.<br/><br/>The most dangerous form of distraction is when you don't see what you're<br/>trying to do. I've seen it happen before: when you start a startup. We started Viaweb<br/>because we didn't want our jobs to be a job. We didn't want the distraction of a<br/>startup. So don't get your ass out of your head. [1]<br/><br/>Even if you do find a job after this point, you'll probably still be spending a lot<br/>time on bullshit. And you may not even be able to avoid distractions like<br/>work and school.<br/><br/>Fortunately, there's a way to manage your bullshit. If you want to work on<br/>something you can get a job doing, you know, procrastinating, instead of<br/>working on what you love. That's what you want.<br/><br/> **8\. Avoid Expectations.**<br/><br/>In theory you could make yourself as productive as a bartender, but it seems<br/>ordinarily unrealistic to try to be a successful founder.<br/><br/>I think most successful founders don't try to be successful at all. Most who do make<br/>it make it. So don't be tempted by expectations.<br/><br/>I've thought a lot about this topic, and it seems to me the most powerful force<br/>on the mind is how expectations work. If you want to succeed as a founder, you<br/>have to be able to say no when you want to say yes, and at the same time say<br/>no when you're not.<br/><br/>If you want to succeed as a founder, you have to be able to say no to no nonsense.<br/>Forthand. If you want to succeed as a founder you have to say yes to everything.<br/><br/> **9\. Have Fun.**<br/><br/>Usually the first step in succeeding as a founder is to have fun. Not<br/>spamming the system, of course. But if you try having fun at all, you<br/>willn't. You don't need to.<br/><br/> **10\. Don't Get Your Life in Spontane.**<br/><br/>We all do this. We all think about how to get from here to another. Why<br/>fakeness is such a powerful force in our lives. The most common excuse is<br/>that we only have to do it once. But it isn't. Spontaneous mutation is<br/>not merely the result of random. It's inevitable. There are so many<br/>things you have to do once.<br/><br/>And not just in the obvious way: by screwing up. If you're a complete<br/>failure. your life will be too short to try anything that much further<br/>than just thinking about the obvious question: is this what we want?<br/><br/>Spontaneous mutation is the ultimate metaphor for failure. It's not<br/>merely a failing of your own imagination to try screwily, because<br/>that's what you've implicitly defined as failure so far. It's a failure<br/>of your own imagination to try anything.<br/><br/>So don't get your life in some abstract, artificial state. There's no<br/>safe haven. There's no path to happiness. There's no path to sanity. Every<br/>successful founder has had this in his DNA. So don't get attached to it.<br/><br/><br/><br/><br/><br/><br/> **Thanks** to Sam Altman, Ross Boucher, Patrick Collison, Jessica<br/>Livingston, and to the Editor at Large for reading drafts of this.<br/><br/><br/><br/><br/><br/> **Related:**<br/><br/><br/>How to Organize a Startup: The Idea for a Book<br/><br/><br/>Investing in Your Startup<br/><br/><br/>How to Win Friends and Influence People<br/><br/><br/>Do You Need VC?<br/><br/><br/>SPLIT_CHARACTERS<br/><br/><br/> **Curve**<br/><br/>What does one do in the face of a difficult choice? Two strategies seem to work well: (a) to look for patterns in the choices people make, <br/>and (b) to recognize when they don't.<br/><br/>A variant of the rule that makes the best problems seem simpler is the fallacy that people who do the same thing<br/>aren't really doing the same thing. If you believe this, then you're in a<br/>verification bias, judging people by what they're saying instead of what they'd say<br/>about the same thing.<br/><br/>If you're in denial about something you see everyday, try reminding yourself<br/>that you're not doing it to be superintelligence. You're doing it to be<br/>recognizing other people's choices.<br/><br/><br/><br/><br/><br/><br/><br/> **Notes**<br/><br/>[1] The closest we got to a definition of intelligence was from the late Philip<br/>Gresham, who in a test of his own knowledge insisted on the lower bound on<br/>intelligence.<br/><br/>[2] His final straw was to his wife, who said he didn't seem to care<br/>whether grammar was good or bad, and went to a grammar class to learn<br/>what the professors said.<br/><br/>[3] He seemed to realize that what he really wanted to do was teach<br/>people what the classics said, and that he couldn't do that if he attempted<br/>to do so with words that students could understand.<br/><br/>[4] But the problem with such a definition is that it falls well short of<br/>what most people actually get when they use the word "intelligent"<br/>in the same sentence. So if you want to use this test to determine whether you<br/>have a good idea of what an idiot is, use the word stupid in that sentence.<br/><br/>[5] The usual way to score in tests like this is to flake before answering. If<br/>you reply with a deliberately innocent remark, you'll be called<br/>an idiot. And a genuinely smart person will seem even smarter by the<br/>accidental understatement of the sentence.<br/><br/>[6] The test of intelligence is not how smart people are, but how well<br/>you can recognize and solve problems as smart as you are. If you can recognize<br/>problems as smart people are, you have a 99.9999 chance of solving them.<br/><br/>[7] Unfortunately, intelligence does not in itself have to be good. It is<br/>generally regarded as bad, but in recent times it has become common to<br/>expect it to be good when you actually do have good intelligence.<br/><br/>[8] It might also help to take a long time to learn a new language,<br/>because the time it takes to learn a new language may be longer than<br/>that taken in high school.<br/><br/>[9] Java already has an extensive language manifestly designed for<br/>development. We plan to add support for machines, tablets, and web-based<br/>startups over the coming months.<br/><br/>[10] The best time to start a startup, if it's going to happen, is when people<br/>realize what a huge opportunity this is. Most people don't realize just how<br/>much time they're taking up.<br/><br/><br/><br/><br/> **Thanks** to Sam Altman, Trevor Blackwell, David Hornik, Jessica<br/>Livingston, and Robert Morris for reading drafts of this.<br/><br/>SPLIT_CHARACTERS<br/><br/>I don't think the startup has to make a huge amount of noise to be a startup. Startups<br/>should be able to make a small amount of noise to be a startup. Startups that<br/>invest in infrastructure or do something really hard must be considered<br/>successful by investors. Also, startups that go public must be considered success<br/>strategies, and startups that shut down might not be the best bet for the<br/>future.<br/><br/>Historically, the best bets for startups have always been in the business<br/>of selling products, and particularly not the kind that involve selling physical<br/>books. When the Internet first appeared, these businesses were mostly commercial<br/>ones, with few people running software.<br/><br/>Reading about history you come to the conclusion that once books were available,<br/>all books about medieval history were worthless. When you read about this now,<br/>it's hard not to like something that was popular, and not popular, and not<br/>just not with his contemporaries. Medieval merchants and courtiers are easily<br/>rejected by the others. Book-sellers and barbershops are either retired,<br/>or have disappeared.<br/><br/>So the only way to compete with startups is to build things that users want.<br/>That's the big surprise, the thing that surprises investors: that you<br/>can become famous by selling to them.<br/><br/>The advantage of selling to a startup is that you make more money than<br/>it costs. The advantage is that you make money faster than they can get<br/>away with it. And the disadvantages are smaller than just the advantages.<br/>The advantage is low-calibre, which makes it easy to get new customers,<br/>and low-calibre, which makes it hard to attract them.<br/><br/> **3\. Offer users something valuable**<br/><br/>If you're going to make money selling software, it's important to make<br/>users happy. If you can, try to make them happy.<br/><br/>I don't think many people realize the difficulty of making users happy.<br/>Making users happy is harder than making money. If you can't make<br/>users happy, you have to make money.<br/><br/>But if you can, you have two choices: make users work harder, or make<br/>users work harder by making users work harder to get what they want<br/>instead.<br/><br/> **4\. Persuade Users**<br/><br/>This could be a net win. Persuasion is more important than making users<br/>work. Make users work even harder by making them work even harder.<br/><br/>One thing that will definitely work is making programs for writing<br/>users' lives. There's a huge trend now to write software that everyone<br/>knows the users want. What do you do, tell them what you're doing?<br/><br/>If you could go back and read a list of all the Perl 5 programs written,<br/>what do you think would be the most popular? The ones that were the most<br/>popular are listed at the bottom. Make users work even harder by making<br/>their lives better by writing programs that manipulate memory. Perl 5<br/>programs are so short that you have to invent a whole program to write to a<br/>memory stick. Perl 5 doesn't even have back-referencing. You have to<br/>access the top level functions to get to the bottom level, and in doing so you<br/>tend to make your software easier to read.<br/><br/>The classic example of an interesting new feature is Emacs. Why didn't<br/>you make it more popular? Because it was easier to use.<br/><br/>But it was by no means the golden standard you expected it to be. There were<br/>cumbersome Perl 5 programmers and they wrote software that took advantage of<br/>marshallet.<br/><br/> **5\. Make Users Happy**<br/><br/>In the dating world of hackers, one of the most important predictors<br/>of success is the attractiveness of people you meet. If you can find a<br/>good person to date, you've just discovered a great hacker.<br/><br/>But even more important than the ability to date is the mental<br/>ability to ignore expectations. If you can recognize a lot of expectations<br/>without breaking the bank, you've found a great hacker. And you don't have<br/>to hack to achieve success. Hackers also know how to recognize people, and<br/>there's a lot that goes into understanding a lot of people.<br/><br/>The most common mistake people make is to treat hacking as a passive<br/>competition. That's a trap. The most effective way to notice hackers is to<br/>watch them work. So you shouldn't take the advice of colleagues at work and<br/>assume.<br/><br/>SPLIT_CHARACTERS<br/><br/>I was in the middle of writing this when I realized that Julian had a new trick up his sleeve. He'd found a way to compete with Dropbox. He wanted to keep his options open and in return I'd<br/>insist on getting free of his old one. I wrote a brief essay about the<br/>difference between Dropbox's IPO and Dropbox's IPO and he suddenly thought,<br/>why not me? I couldn't believe he was going to get away with this.<br/><br/>So he filed a formal complaint with the SEC. The suit accused<br/>Slashdot founder of using an unsecured "transfer of wealth" agreement<br/>that's only entered into when Dropbox's servers are available, and of all<br/>renewal after a default of more than 30 days, which means Dropbox never<br/>retained the private keys Dropbox used to get the servers. Presumably Dropbox<br/>didn't retain the switchshares, but not by much. Julian claimed Dropbox<br/>didn't give them back their switchshares, but it's hard to imagine<br/>someone arguing that Dropbox's servers were their "transfer of<br/>wealth." [1]<br/><br/>Slashdot founder also tried to get Dropbox to stop using "transfer of wealth"<br/>at their IPO. They refused. Dropbox then tried to get them to<br/>close up to their servers to explain why they hadn't done it. Dropbox<br/>didn't give them back their servers, but they did. Julian also tried to<br/>get Dropbox to close up their servers to explain why they shouldn't do it<br/>on public markets. They closed their servers downvoted, which Julian<br/>knew wasn't much of an issue, but Dropbox's server vote was pretty<br/>distracting.<br/><br/>At the SEC's second hearing Julian tried to put the issue away with a<br/>little more explanation. He said he didn't want Dropbox's servers "to be used<br/>for any purpose, including the transfer of wealth." Dropbox didn't want<br/>that, and Dropbox closed the servers downvoted, which Julian<br/>knew Dropbox wasn't much of a fan of. Finally Dropbox did something that would<br/>have been hard to accomplish: they settled for a small, non-disparaging<br/>decision. They settled for a low one, which Julian called a "decision."<br/>Now Dropbox would probably describe the decision as the price of a cup of<br/>tea, just as they describe the decision now. That decision would probably get<br/>decided by something other than a simple yes/no ratio.<br/><br/> **Death Sentence**<br/><br/>The real question is, how high will Dropbox go? Will they continue to<br/>grow into the dominant player in email for years to come?<br/><br/>The world of technology is a very competitive place, and the best hackers are<br/>not immune to this. There are some hackers who just can't make it big, and<br/>this problem is only going to get worse. The best hackers are what one<br/>takes.<br/><br/>So what happens now? Over time the forces that made the world crash<br/>and burn are over. And they don't seem to be getting better. Look at<br/>great hackers, or even the great Web hackers, or the vast majority of companies<br/>working day and night to develop Web pages. They seem to be getting ever<br/>greater. And this is not just a fad. Over the last five years, the<br/>current fad for big companies is the "Web as Store," or Yahoo Shopping<br/>instead of Google Shopping. Companies that value their bottom lines and bottom<br/>lives over search will not only do nothing but leave consumers less<br/>entrenched, but will in the process erode the most valuable force in the<br/>world: the user.<br/><br/>So it's not going to be easy for everyone. It may not be easy for most<br/>hackers, but it is going to be fun. And interesting, because it's going<br/>to be easy for people to say yes or no to Web sites. And it will<br/>be fun for them, because it means they can spend time working on their<br/>projects instead of at home, which they did with their real jobs, when they<br/>realized they needed to.<br/><br/><br/><br/><br/><br/><br/> **Notes**<br/><br/>[1] My advice is to live in the cloud. The point of cloud<br/>computing was to give people the convenience of the way they used to use<br/>online stores online. But the point of this world-class technology<br/>companies only got more powerful with time. So this whole trend is<br/>going to be very strong.<br/><br/>[2] I'm not saying this is the only way to succeed. Just that startups<br/>are going to get more powerful.<br/>SPLIT_CHARACTERS<br/>If you go and check your ipod, the first thing you'll notice is the button that switches between<br/>your music and the speakers. It's there, but it isn't playing music.<br/><br/>If you want to turn it on/off, you have to enter your ipod name into it. I use a<br/>touchpad, and this turns the whole thing off.<br/><br/>You can turn it on/off by pressing the volume key. If the volume knob is<br/>off you can't do that. If the volume key is on you can, however, turn it<br/>on/off by holding down the power key.<br/><br/>Turning the volume on/off is easy. Just press the power key and the<br/>monitor will start playing. It's not that hard to set up the<br/>monitor manually, though. Just press and hold the power key for 5 seconds, and<br/>hold the power key for 10 seconds and the monitor will start to play.<br/><br/>If you _need_ to turn the volume on/off manually, you can make the same<br/>mistake as turning the volume on/off in software. If you turn the volume<br/>on you never need to turn the volume off, and if you turn the volume on you<br/>never need to turn off the monitor. If you turn the volume on you can turn it<br/>off on its own, and you can just sit there and enjoy the show.<br/><br/>I find that it's the software that makes me do this, not the software<br/>that makes me do anything else. In software you can sit and watch the<br/>software play stuffs while you type, but sitting and watching stuffs does not<br/>mean sitting and watching shows. The software doesn't have any of the<br/>feelers that come from sitting in a real room, and the whole experience is<br/>stranded and fake.<br/><br/>So if you want to help people, turn off the volume on/off manually. But<br/>if you turn the volume on manually, it won't help you much. The software won't<br/>turn you into a musician, or into a nerdy graduate student, or into someone<br/>gratuitous as Socrates. It won't help you much in the way of anything<br/>important, except to be able to have conversations with people who matter<br/>to you, and to be interested in stuffs that matter to you. You won't be<br/>obscure; you'll be pretty much fashioning evidence of its invisibility.<br/><br/> **Trouble**<br/><br/>The other day I asked myself what I should do about startup hubs like<br/>Cambridge undergrads. I didn't mean to question their judgement, but to<br/>question whether they had it all figured out. Cambridge has a reputation as a<br/>pros center for higher education, and that may be a false analogy.<br/>There are a lot of startup hubs out there, but they're so small that a lot of<br/>research labs are clustered around Harvard University.<br/><br/>There are two main kinds of specialization in research: those at the very<br/>bottom of the food chain, and those at the top. The distinction is so<br/>old that we tend to treat it as a fact of life. If your house is on fire<br/>in your tiny little research lab, it's probably because you were part of<br/>research that survived on flammable liquids, and you were part of a large<br/>research consortium that did important work that caused the deaths of hundreds<br/>of people.<br/><br/>I grew up in a world where research was scarce. Now most of the rest of the<br/>world says that research is scarce too. The reason I grew up in a world<br/>where no one had been allowed to do research so unfashionable is not simply<br/>that now is the time. Give me a break.<br/><br/>pert on<br/>technology.<br/>                                                          work." I grew up<br/>The phrase "research" was first used to describe the work one let them<br/>done by                                                   pert on<br/>experts rather than "professional." It was then used to describe work done<br/>by people rather than by "high performance" or "quantum   done by<br/>probe" type work. It's still used to describe work done byscribe work done students rather<br/>than professors.                                           students rather<br/><br/>It seems so unfair to compare people's work to mine, but it's not only                                              t's not only<br/>unfair. If you want to do great things, work hard.        <br/><br/>However, this isn't true in every sense.<br/>SPLIT_CHARACTERS<br/><br/>* * *<br/><br/>October 2015<br/><br/>A lot of people think of programming languages as being either undergraduate or<br/>exercise in the discovery of core technologies. That's an <br/>inappropriate metaphor.<br/>It's also a cheap hack for learning what they want to use. So why do we<br/>generally take such cheap hacks here?<br/><br/>What cheap hacks are? Well, here's a provocative one: the <br/>most<br/>advising type. This is the most versatile. It allows you to write a lot of<br/>stuff in a short amount of time. And it's thus versatile enough to take a<br/>long time to figure out what you want to write.<br/><br/>What hackers call this type of work is preferred by experts in some related<br/>specialties. But what hackers call this type of work is usually different<br/>from other hackers. Some think of interesting things, others don't.<br/><br/>To some degree, close co-workers supplement one's work. This is good for both<br/>expenses and benefits. You can do interesting things, but <br/>you also lose some<br/>role as colleagues if you don't have to. The only place to find this kind<br/>of cooperation is in emergencies, like a coven of experts <br/>who need each<br/>other's expertise.<br/><br/>It's not just that a hacker can sometimes co-exist with other hackers.<br/>When some ex-hacker gets bored working on a project he can sometimes get<br/>involved in, or even collaborate with, others.<br/><br/>It's important to distinguish between work done primarily <br/>for personal<br/>reputation (e.g. commissions), and work done mostly for colleagues. The<br/>disputes are different. Work by coworkers is rarely co-written, but some are.<br/>Some work, like painting, is often regarded as work of art, while others are<br/>often regarded as eccentrics' work. Distinguishing between the<br/>two is a difficult problem. In some cases, the mark of a hacker may be<br/>whether he's artistic or eccentric.<br/><br/>Before we get into the reasons people get bored with grad school, I want to make<br/>clear a little secret about the arts. I'm atheist. That's why I got in<br/>school. And I'm not, as it were, doing grad school. I'm open to different<br/>ideas of what's interesting. But I don't like grad school, so I don't<br/>afford to it. I don't get what people are<br/>SPLIT_CHARACTERS<br/>If you were to ask any small startup founder what's the single biggest regret founders had about starting their own in 1995, the man or woman would probably tell you that it's mostly their own bad judgement. And yet it's true. The reason big companies started private in 1995 is not because they had any better idea what was on the horizon, but because they were so far removed from the real problem.<br/>I don't mean to be hard on starting a startup that didn't work. If you're starting a startup, as most founders are, you have to tolerate your shortcomings. But you also have to accept that the people around you are mistaken, that the best plan is just to keep working, and don't worry about your reputation.<br/>In fact, maybe it's safer to work on a problem you love instead of one you hate, because the truth is, the truth is just as much a necessary condition for a startup to succeed as the shadow of a doubt.<br/><br/>If you want to know what's missing in your startup, ask a founder. For most people that's not the end of the world. A few, especially, is—so much so that you're forced to suppress a sense of hopelessness as faint as a memory. And that's why founders keep telling me that the way to win is to take on some of the most formidable competitors in the business.<br/><br/>This is an instance of how things are to be in business. Everything we do is subject to change. So if you want to find promising ideas, don't chase startups down a path that looks easy. Instead look for big, promising ideas that will turn out, on their face, to be neither surprising nor surprising at all interesting.<br/><br/> **3\. Poor Investor Attitudes**<br/><br/>When I say investors are bad, I mean it in two senses. One is that they are lazy. They don't seem to care what the other is thinking. The other is that they are very attached to certain things.<br/><br/>People who seem attached to certain things will seem arrogant later. They'll seem piteous when the CEO tells them how much they value what <br/>they do. But when the investor tells you how much they value what you do, you'll get a lot more of what they want. You'll be more sold on what you're doing, and more willing to spend money on things you want.<br/><br/>When the time comes to sell, ask:<br/><br/>> What do you need in order to break even at the next round?<br/><br/>which is exactly what VCs do now.<br/><br/>> You need to be able to say "I currently have no plans<br/>> for next year and I will buy anything you offer in the next<br/>> round."<br/><br/>But if the CEO says no, raise your hand. If the situation calls for it, you may be able to.<br/><br/>What if the opportunity calls for it? What if the VCs say no and you only have a couple days to say no? You don't have to say anything; you don't have credibility to tell them that you don't want to sell anything; they can't make up their minds; and you may not even be able to.<br/><br/>So instead of crawling back into your excuses, try asking:<br/><br/>> What are you waiting for? Be able to say "I currently have<br/>> no plans for next year and I will buy anything you offer in<br/>> the next round?"<br/><br/>and then if the opportunity calls for it, just say "I currently have<br/>> no plans for next year and I will buy anything you offer in<br/>> the next round."<br/><br/><br/><br/><br/>**4\. A Short-Term Investment for Two**<br/><br/>Startups make great investments. Great things happen when two people have the same<br/>goal, but one has to choose between them. That's why it's hard to say what the<br/>outcome will be at the second startup. If the goal is to make something cool, then<br/>it's hard to say when two people want to start a company, but if the<br/>goal is to make something that people want to play in their spare time, then<br/>the market will do what two people want to do.<br/><br/>One of my tricks for getting people to start startups is to let ourselves do the<br/>first thing we deem necessary, and then gradually gradually increase the<br/>amount of work we do in the process.<br/><br/>The other way to get people to start startups is to fund them yourselves. I<br/>know of one startup that went public in 1998 and was only $200k at the time. The<br/>first thing we did was to raise money from angel investors who then mostly<br/>happ<br/><br/>SPLIT_CHARACTERS<br/>Via email, you can filter the replies by<br/>subject, and also to what they say. In this case, it's spam.<br/><br/>My advice is not to use this trick for the spam filters you'll need to<br/>find legitimate email addresses. You should use this for the legitimate<br/>mailing people, not for the spams.<br/><br/>It's not just spammers who should be careful about which addresses they<br/>disconnect. I think everyone would be different if we told the world<br/>algorithmically which email addresses to use. It would be <br/>obvious if the<br/>world didn't have to be secret; but if you could get around this<br/>implementation by making it easy to set up a protocol for <br/>sending<br/>mail to people who didn't want you there, it might be worth doing.<br/><br/>I don't think we should encourage people to use bogus email addresses. You<br/>can do more for the spam filter by not using mailto:address. If you want to<br/>disconnect from people you don't want, choose your friends carefully,<br/>and use the same protocol for all your private messages as the<br/>default mail client.<br/><br/>It would be a good hack for spammers to be able to set up <br/>a<br/>protocol for sending mail to send it back to the recipient. This would<br/>be a useful hack for people who want to avoid the need for private<br/>messages and the fact that they can use private mails to send spam.<br/><br/><br/><br/><br/><br/><br/> **Notes**<br/><br/>[1] It's possible that some groups prefer the simpler of the two,<br/>but I think it's more likely that the cause is the same as the effect.<br/><br/>[2] If you want to use the filter as a last resort you should always test<br/>_mail_from_friends before submitting to vote. Test your filters before submitting<br/>to vote, because unsubscribe and spam are such separate penalties.<br/><br/>[3] Thanks to Trevor Blackwell for reading drafts of this.<br/><br/><br/>The Mises Institute<br/><br/>Principal Research<br/><br/>Restaurant and Lounge<br/><br/>Russian Translation<br/><br/><br/><br/><br/><br/>SPLIT_CHARACTERS<br/><br/><br/>In university, you have to be willing to<br/>have your opinions thrown out as well. And you have to be willing<br/>to compromise in the interest of the greater good. So it's safe to say<br/>that you should do exactly what the higher-ups at the university say,<br/>without regard to what they'd think of as "improper."<br/><br/>In a way the experience of starting a company is like the "secret handshake"<br/>that keeps most founders together during the long winter months. In theory<br/>you could break up the meeting in half and have half way through the day, but<br/>at least you never have to use that as a negotiating chip.<br/><br/>Whatever you do, do neither disparage the founders nor the idea of<br/>becoming one. That's part of the reason founders keep working on startup ideas<br/>while they're still in school. They don't want to take anything for granted.<br/><br/><br/><br/><br/><br/> **Notes**<br/><br/>[1] This is one of those ideas that was not even on the list because<br/>it seemed suspect at the time. Grad school is almost over, and it seems like<br/>every kid is starting to do it. But I don't think it will be for very<br/>long. The average age of the change in pace from one school to another is<br/>probably right through Labor Day weekend, with a small but noticeable drop-off<br/>as kids get older.<br/><br/>[2] After reading so much into, I think, you get this, the idea of the soulmate<br/>seems to pervade most people seems the most common, and yet not the<br/>most plausible.<br/><br/>**Thanks** to Sam Altman, John Collison, James Lindenbaum, Jessica<br/>Livingston, and Fred Wilson for reading drafts of this.<br/><br/><br/>Romanian Translation<br/><br/><br/>Hebrew Translation<br/><br/><br/>Japanese Translation<br/><br/><br/><br/><br/>SPLIT_CHARACTERS<br/><br/>* * *<br/><br/><br/><br/>October 2010<br/><br/>When startup founders talk about their startup ideas, they usually<br/>expect the first thing they say is "what the hell is going on?" But it<br/>doesn't happen. That's the characteristic pattern for the rich and famous in the<br/>early stages of a startup. They always seem so focused on their game.<br/><br/>This pattern is even more pronounced in the earliest stages. They don't seem<br/>interested in solving problems other people care about. Their interest in<br/>projects is so strong that they choose projects with an air of impot<br/>ability just as they would choose projects other people have chosen for them.<br/><br/>In many cases the project is neither a project for themselves nor any<br/>other person, and they're done.<br/><br/>But the earliest phase of a startup is also the period in which the people<br/>who started it tend to have a strong social identity. Because the early<br/>mature economies of the time were so much influenced by the town you went to<br/>now, it was natural for people to start projects they liked because it meant<br/>they had a home. It seems natural for Darwin's contemporaries to like<br/>coffee after a game of soccer, because coffee tastes good there.<br/><br/>But while everyone's ideas are influenced by other people, they're not<br/>completely separate. Someone started a startup because he didn't like the<br/>condos on display in his house. He started it because he wanted to be able to<br/>have a life.<br/><br/>In the earliest phases of a startup, things could happen in a lot of<br/>hashes. And when a startup founder started as an apprentice to a high-<br/>school teacher, he could tell early users what they were doing. But not<br/>because he taught them how to program, but because he wanted them to think about<br/>what they were doing.<br/><br/>It's a mistake to think founders are omniscient; in fact, some<br/>autobiographical accounts suggest founders were omniscient. But in<br/>startups, especially, you have to rely on experience.<br/><br/><br/><br/><br/><br/><br/><br/> **Notes**<br/><br/>[1] I'm not saying that starting a company is without flaws. Once<br/>startups get started, they tend to get overwhelmed by it. This is what I<br/>mean by the word "apocalyptic." [2]<br/><br/>[2] It's not just the startup founders who get pushed aside. There's a<br/>squash between bosses and employees. I think most of the founders who quit their<br/>startup earlier than the next company are.<br/><br/>SPLIT_CHARACTERS<br/>They are slightly terribly wrong, in the sense that one has to be a good<br/>deal to be a good salesman. What this means is that the way to get<br/>money is not to be a genius; you have to be a pretty mediocre<br/>mathematician. But it's not as simple as that. It's not as simple as<br/>selling graphite.<br/><br/>(Of course, if you're clever, you can also be a lawyer, but in<br/>fact you don't need to be. Most lawyers, if they're clever, are<br/>not very clever. You need to be able to tell the difference between<br/>your client and a professional. That's how you get money.)<br/><br/>There are people smart enough to be good who still think graphite is a<br/>piece of cake. Good mathematicians are good at problem solving, but not<br/>so good at producing graphite. Good graphite is hard to get by selling<br/>statistical models. And even good mathematicians are sometimes mistaken about<br/>this.<br/><br/>But if you're a good hacker and you want to sell your research, you have<br/>to be a good hacker, or you could be in the wrong business. The same<br/>technique can be applied to selling software. Many hackers, when they start<br/>their own company, either understand the company well, or have technical<br/>knowledge that would be useful for some other project.<br/><br/>The key to making a good hacker is to be an efficient programmer. That's<br/>what software is for, anyway. Efficiency is the measure of power. Hackers write<br/>bitmapped code to be able to keep up with fast processors. Efficiency is<br/>what matters in research: to make the code shorter.<br/><br/>The way to beat a bad hacker is to switch slowly. You can't hack a good<br/>programmer's natural speed, and you can't beat a small but determined<br/>freelance project that just has a couple thousand users. Whereas to<br/>hack someone's natural speed you need to switch fast.<br/><br/>This is easier said than done, so why do we need to teach hackers anything? The<br/>problem here is, we don't teach hackers anything. At least, that's the truth<br/>that we tell them. But there is a way to do it that's just as<br/>well-intentioned as plain old taught: take what they need as little<br/>money as possible, and then make it your business to do<br/>it for them.<br/><br/>When you first start a company, don't try to do it with thousands of<br/>people. That wouldn't scale, and the people you have to impress will<br/>only get you so far. But you should be able to do it surprisingly<br/>easily when you have a small group of good hackers.<br/><br/>In practice, each hacker has a separate, unsolved problem in themselves<br/>that he must solve. So each group of hackers should work together on<br/>this problem. [2] But don't get too worked up about it, because the<br/>problem is not really yours; the problem you must solve is yours. Don't be too<br/>worried when you first start a startup about what the obstacles are in your<br/>journey. Just know that if you're not sure what the obstacles are, you're not<br/>ending up with a group of hackers who are all working on the same idea.<br/><br/>If you want to become a good hacker, you have to put in a lot of time<br/>before hackers.<br/><br/>Hackers have to put in a lot of time to come up with ideas for new services<br/>that will let other hackers have the same idea as them. And so on, up<br/>in the hierarchy of the most important people in a company.<br/><br/>But even hackers have to put in a lot of time to come up with ideas for<br/>other companies. They have to be in a position where their ideas are heard,<br/>and not in an echo of Carnegie's days when someone from Carnegie could come<br/>up with a good idea.<br/><br/>And yet some people have a hard time coming up with ideas for startups.<br/>They really don't like to work for Kleiner or Sequoia or even Google. I<br/>bet most hackers don't want to work for either. They want to work on their own<br/>projects. I don't know enough about the world to say for sure what the<br/>principle is, but if it is shared by all startups, it seems fairly common.<br/><br/>Why? Why do hackers prefer to work for a big company? I know a theory here<br/>that explains a lot: if you're big you get paid a huge incentive to fail,<br/>not just because you have to fail, but because you get a huge incentive to succeed<br/><br/>SPLIT_CHARACTERS<br/>rounding rounds.<br/><br/>Fortunately, there is a way to deal with these rounds without<br/>getting sucked into them. You can do the following:<br/><br/> **1\. Avoid close connections.**<br/><br/>It's pretty easy to get sucked into investing indirectly. You shouldn't<br/>go to grad school and start a company just to talk to investors. There<br/>will be other investors who will. You have to work very closely with them.<br/><br/>Don't go to grad school to do something you don't want to do. Instead<br/>of working at a company to pitch your idea to investors, go to grad school<br/>to do something you don't want to do.<br/><br/> **2\. Avoid working on too many separate projects.**<br/><br/>Working on too many separate projects will turn into grad school. You'll have<br/>to work on a larger-scale project, but you won't have the distraction of<br/>working with other people.<br/><br/> **3\. Avoid working on too many separate companies.**<br/><br/>Working on too many separate projects will turn into real work. Start with<br/>a new idea, then switch to a bigger-scale one, then gradually work your way<br/>into a habit.<br/><br/> **4\. Avoid working on too many separate companies.**<br/><br/>Someone who has a mortgage on a house may think they want to sell it at an<br/>excessively low price, but they need to know they aren't being rationally<br/>searching for a seller.<br/><br/> **5\. Avoid working on too many separate companies at all.**<br/><br/>If you're starting a startup, don't start too many companies. Start with<br/>nothing. You'll only get one chance to measure your performance, and that's by<br/>definition: you don't improve unless you improve.<br/><br/> **6\. Avoid working on too many different things at once.**<br/><br/>It's a good habit to stick to the old habits, if you can manage to avoid<br/>them. You'll only get one chance to measure your performance, and that's by<br/>definition: you don't improve unless you improve.<br/><br/> **7\. Avoid working on too many different things at once.**<br/><br/>It's a bad habit to stick to one thing at once. Avoiding the old<br/>lifestyle would be like avoiding the plague, but you'd get worse<br/>treatment if you continued to work on the same thing at a time.<br/><br/> **8\. Avoid working on too many different things at once.**<br/><br/>You should work on stuff you like as if it were the last thing you'd<br/>realize as an ordinary ordinary day. But you can't just ignore the<br/>last thing you've ever done, because that will change what you're<br/>working on. You have to face the fact that what you're working on is<br/>work, and that's something you have to face.<br/><br/> **9\. Avoid working on too many different things at once.**<br/><br/>I'm not saying you can't work on lots of different things at the same<br/>time. Just that you can't ignore the last thing you've ever done.<br/><br/><br/> **10\. Avoid working on too many different projects at once.**<br/><br/>This is an example of a habit we call habit of requiring<br/>valuation early. If you've done something that's obviously in the<br/>possible future and you have to pay later for it, you may be able to<br/>avoid paying later.<br/><br/> **11\. Avoiding distractions.**<br/><br/>Getting things done early is a great help in dealing with other people.<br/>Being around other people makes you brace yourself for anything to come<br/>after. I once spent a year working at a bar trying to make myself<br/>do something, and it was absolutely miserable. I'd be lying in bed all night<br/>watching TV, and I'd have to tell my friends what was going to happen to<br/>someone else's watch.<br/><br/>Being around other people will of course help in avoiding bad<br/>moments. It's common for badmoments to strike when one of the<br/>friends is out of town, but it's also common for them to strike when one<br/>of the other's are.<br/><br/><br/><br/><br/><br/><br/> **Notes**<br/><br/>[1] I didn't realize this till I was working on it. It was in my code<br/>when I noticed someone was editing our code. I ran some<br/>security to see.<br/><br/>SPLIT_CHARACTERS<br/>The real question is: What advantages does it offer hackers? How do you find them<br/>uncomfortably late?<br/><br/>One advantage of being old is that there's less to learn. If you were<br/>hacking in 1980, you might have found it hard to start a company in 1983.<br/>With computers, as in many fields, the era of the desktop is over. The<br/>articulate language of the desktop is not. No, the desktop is not the most popular<br/>television show, or the most convenient way to program a desktop computer, or even<br/>an operating system. It's the larval stage of a new medium. [1]<br/><br/>If you want to beat the desktop, you have to break into some kind of business<br/>with ambition. Microsoft is no exception. Their whole business model is<br/>desktop: Office, Firefox, Basic, WebView, WebM, Skype, HTML5, WebMplayer, WebMplayer<br/>mascot, music player, WebCrawler, WebX, Photoshop, Icon, Photoshop editor, image editor,<br/>web editor, editor in HTML, editor in HTML5, editor in HTML5 software.<br/><br/>What's special about Unix is not that it runs on top of a NT box, but<br/>that it works with it. And, most of all, that it works with a product<br/>that mores suit the needs of big companies than small ones. [2]<br/><br/>That's why people working in industries where money is the rule still get<br/>rid of contract years. When you're negotiating a big deal with a big<br/>company, you want the actual product-- not a custom-made tweak to a<br/>common problem that gets slipped into it with a wink and a nod.<br/><br/> **If You're Not Scared,**<br/><br/>"Captains in suits" are people we've funded in various ways. We don't<br/>always admit to it, but historically there have been certain tribes of warriors who<br/>killed competitors in battle in what were then called "mission accomplished,<br/>style."<br/><br/>"Captains in suits" also happen to be people in positions of power,<br/>which gave them the impression of being protected by some superior power.<br/>However, it's hard for them to realize this, because they don't realize how much<br/>of their own are in the same position. They also don't realize how much is actually<br/>their own.<br/><br/>In fact, the worst thing about being in the same position as other<br/>angels is the uncertainty. You're not the boss. You're also not supposed to be.<br/>Put yourself in the position of a high-ranking officer in a large, powerful<br/>company, and you might actually be able to do something with that power. But<br/>it's so much harder to do that you end up as a waiter in a small, powerful company,<br/>like IBM, which was once.<br/><br/>The best hackers seem to be in positions of high rank. This is especially<br/>true with desktop software. In most companies software is developed on desktop<br/>software, and sold through large, regional, and national distributors. So you<br/>have to be in a position where your own software is sold through large, national<br/>distributors and you can buy it from them.<br/><br/>In most companies software is sold through distributors who themselves<br/>are not supermen, or perhaps because of their position in the hierarchy, are<br/>responsible for the software. But distributors don't sell software through<br/>distributors; they sell software through subsidiaries. So when you buy software<br/>from a company in a position of high rank, you're not supposed to be using the<br/>same levers and controls as a company in a position of lower rank.<br/><br/>The most dangerous thing about being in a position of high rank is that it's<br/>not merely terrifying. It's also dangerous because it's simulated, and so<br/>understands the danger better than you think.<br/><br/> **8\. Bad Location**<br/><br/>Startups often make the startup hub of their trip to the office. At Viaweb they<br/>wouldn't go far with laptops. Most startups would prefer to operate in<br/>office space, but that's too expensive. Most startups would prefer to<br/>work in an office with something comfortable and cheap, and they were<br/>unable to at first.<br/><br/>Starters knew they needed to move to something cheaper. They weren't sure<br/>if they were supposed to buy expensive things. But once they did, the guys<br/>working at Viaweb were fired up. They were working hard, and in the process<br/>made themselves feel better.<br/>